#summary This page described how to get started with the FlexCB project and how to set up your development environment.

= Introduction =

This page described how to get started with the FlexCB project and how to set up your development environment. To follow this tutorial, you will need:
  * A working installation of Adobe Flex Builder 3 Professional Edition
  * A working installation of a Subversion plugin for Adobe Flex Builder 3
  * A working copy of FlexUnit

The source code for the FlexCB project is organized into various logical components. We recommend you setup independent projects for each of these components, mainly to save compilation time when making changes.

= SDMX and the dynamic visualization of statistical data =

The FlexCB visualization framework is based on the SDMX standard for various reasons:
  * It is an ISO technical specification (ISO/TS 17369), sponsored by 7 international institutions.
  * The SDMX information model describes all the components needed to represent the statistical data and metadata being displayed.
  * The SDMX information model can be represented in various XML formats (SDMX-ML), and XML is ideal for feeding data to the visualization tools.

For additional information regarding SDMX, please see http://www.sdmx.org. A description of the SDMX information model used in the FlexCB visualization framework is available in the Section 02 of the SDMX Documentation package (http://www.sdmx.org/index.php?page_id=16#package). 

= The FlexCB source code in a nutshell =

The code is organized into the following components:

== 1. SDMX-ML Readers Package ==
The SDMX-ML Readers package reads the data structure definitions and the data files, in the SDMX-ML Structure and Compact formats respectively. The readers will parse SDMX-ML data structure definitions and extracts code lists, concept schemes, organization schemes, data flows and key families. They will also parse SDMX-ML data files and extracts data sets, groups, series and observations. They will use the information available in the data structure definition (the dimensions, the attributes, the measures, etc) to interpret the statistical data. The readers will then translate the extracted data into objects of the SDMX information model (see next section).
== 2. SDMX Information Model Package ==
The SDMX Information Model Package represents the classes defined in the SDMX information model (code lists, concepts, dimensions, data sets, series, observations, etc) as objects that can be stored in memory. These are the objects that can then be visualized, using the views defined in the third package (see below).
== 3. FlexCB MVC Package ==
The FlexCB MVC Package provides views displaying the objects of the SDMX information model in various ways (charts, tables, metadata panels, etc). It also supports the possibility to combine various views on a screen.
It follows the Model-View-Controller pattern and implements a few other design patterns (Command, Abstract Factory, Singleton, Observer, etc.).

= Download of the source code =
As mentioned in the introduction, we will organize the source code into various libraries and projects.

== 1. The SDMX library==
This library will contain the SDMX-ML reader package as well as the SDMX information model package.
  # Open Flex Builder and create a new library (File > New > Flex Library Project). We named it FlexCB_SDMXFramework.
  # On the next screen, add the FlexUnit swc file to the Library path.
  # Create a folder called src in the library, and, below that folder 2 other folders, main and test (File > New > Folder).
  # Import files from Google code (File > Import > SVN > Project from SVN). Browse the repository and select trunk > src > main > org and press Finish.
  # Select "Check out as folder into an existing project" and select the src > main folder of the library we just created.
  # We now need to repeat steps 4 and 5, but for the test folder (select trunk > src > test and check it out into the src > test folder of the library).
  # Add src/main and src/test to the Source path of the library project (Project > Properties > Flex Library Build Path > Source path > Add folder). 
  # Add all the classes to the library project classes (Project > Properties > Flex Library Build Path > Classes).

We should now have a working copy of the SDMX library.

== 2. The FlexCB MVC library==
This library will contain the FlexCB MVC package.
  # Open Flex Builder and create a new library (File > New > Flex Library Project). We named it FlexCB_MVCFramework.
  # On the next screen, add the FlexUnit swc file to the Library path and add the SDMX library created in step 1.
  # Create a folder called src in the library, and, below that folder the following hierarchies: main > eu > ecb and test > eu > ecb (File > New > Folder).
  # Import files from Google code (File > Import > SVN > Project from SVN). Browse the repository and select trunk > src > main > eu > ecb > core and press Finish.
  # Select "Check out as folder into an existing project" and select the src > main > eu > ecb folder of the library we just created.
  # We now need to repeat steps 4 and 5, but for the test folder (select trunk > src > test > eu > ecb > core and check it out into the src > test > eu > ecb folder of the library).
  # Import the library assets (select trunk > src > main > eu > ecb > assets) into the src > main > eu > ecb folder.
  # Add src/main and src/test to the Source path of the library project (Project > Properties > Flex Library Build Path > Source path > Add folder). 
  # Add all the classes, except the asset directory, to the library project classes (Project > Properties > Flex Library Build Path > Classes).
  # Add the asset directory to the library assets (Project > Properties > Flex Library Build Path > Assets).

We should now have a working copy of the FlexCB MVC library.

== 3. The sample applications ==

Three sample applications are provided with the FlexCB project (below trunk > src > main > eu > ecb > apps). We will now setup one of them.
  # Create a new Flex project (File > New > Flex Project). We named it FlexCB_SampleApp2. If so you wish, you can delete the sample mxml application automatically created by Flex Builder. Add the FlexCB MVC library to the library path.
  # Create the following hierarchy eu > ecb > apps (File > New > Folder) below the src folder.
  # Import the application from Google code (File > Import > SVN > Project from SVN). Browse the repository and select trunk > src > main > eu > ecb > apps > sample2 and press Finish.
  # Select "Check out as folder into an existing project" and select the src > main > eu > ecb > apps folder of the library we just created.
  # Set src > eu > ecb > apps > sample2 as the Main source folder.
  # Run the applicatiom from Flex Builder (Project > Properties > Flex Library Build Path > Source Path).
  